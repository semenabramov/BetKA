#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor

load_dotenv()

def create_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
    postgres_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'PostgreSQLasdfgzx333221qwe'),
        'port': os.getenv('POSTGRES_PORT', '5432')
    }
    
    database_name = os.getenv('POSTGRES_DATABASE', 'betka')
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(**postgres_config)
        conn.autocommit = True
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (database_name,))
        exists = cursor.fetchone()
        
        if not exists:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(f'CREATE DATABASE "{database_name}"')
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{database_name}' —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{database_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    postgres_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'PostgreSQLasdfgzx333221qwe'),
        'database': os.getenv('POSTGRES_DATABASE', 'betka'),
        'port': os.getenv('POSTGRES_PORT', '5432')
    }
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(**postgres_config)
        cursor = conn.cursor()
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        tables_sql = [
            """
            CREATE TABLE IF NOT EXISTS teams (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                league VARCHAR(255) NOT NULL
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS alias_team (
                id SERIAL PRIMARY KEY,
                id_team INTEGER NOT NULL REFERENCES teams(id) ON DELETE CASCADE,
                alias_name VARCHAR(255) NOT NULL,
                language VARCHAR(2) DEFAULT 'ru' CHECK (language IN ('ru', 'en'))
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS "Matches" (
                id SERIAL PRIMARY KEY,
                date TIMESTAMP NOT NULL,
                team_home INTEGER REFERENCES teams(id),
                team_away INTEGER REFERENCES teams(id),
                split INTEGER,
                match_score VARCHAR(10)
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS odds_sources (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                url VARCHAR(255) NOT NULL,
                premier_league_url VARCHAR(255),
                championship_url VARCHAR(255),
                league_one_url VARCHAR(255),
                league_two_url VARCHAR(255),
                bundesliga_one_url VARCHAR(255),
                bundesliga_two_url VARCHAR(255),
                liga_url VARCHAR(255),
                la_liga_url VARCHAR(255),
                serie_a_url VARCHAR(255),
                ligue_one_url VARCHAR(255),
                is_active BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS bookmakers (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL,
                premier_league_url VARCHAR(255),
                championship_url VARCHAR(255),
                league_one_url VARCHAR(255),
                league_two_url VARCHAR(255),
                bundesliga_one_url VARCHAR(255),
                bundesliga_two_url VARCHAR(255),
                liga_url VARCHAR(255),
                la_liga_url VARCHAR(255),
                serie_a_url VARCHAR(255),
                ligue_one_url VARCHAR(255)
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS odds_from_sources (
                id SERIAL PRIMARY KEY,
                match_id INTEGER NOT NULL REFERENCES "Matches"(id),
                sources_id INTEGER REFERENCES odds_sources(id),
                odds_home FLOAT,
                odds_away FLOAT,
                odds_draw FLOAT
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS "Bookmakers_odds" (
                id SERIAL PRIMARY KEY,
                match_id INTEGER NOT NULL REFERENCES "Matches"(id),
                bookmaker_id INTEGER NOT NULL REFERENCES bookmakers(id),
                odds_home FLOAT,
                odds_away FLOAT,
                odds_draw FLOAT
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS "Splits" (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                date TIMESTAMP NOT NULL,
                "Kelly_value" FLOAT,
                "Bank" FLOAT,
                min_bet FLOAT,
                status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'completed', 'archived'))
            );
            """,
            """
            CREATE TABLE IF NOT EXISTS split_matches (
                id SERIAL PRIMARY KEY,
                split_id INTEGER NOT NULL REFERENCES "Splits"(id),
                match_id INTEGER NOT NULL REFERENCES "Matches"(id),
                bookmaker_id INTEGER NOT NULL REFERENCES bookmakers(id),
                selected_outcome VARCHAR(10) CHECK (selected_outcome IN ('home', 'draw', 'away')),
                odds_value FLOAT,
                is_success BOOLEAN,
                notes TEXT
            );
            """
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        for i, sql in enumerate(tables_sql, 1):
            try:
                cursor.execute(sql)
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {i} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã {i}: {e}")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def create_indexes():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    postgres_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'user': os.getenv('POSTGRES_USER', 'postgres'),
        'password': os.getenv('POSTGRES_PASSWORD', 'PostgreSQLasdfgzx333221qwe'),
        'database': os.getenv('POSTGRES_DATABASE', 'betka'),
        'port': os.getenv('POSTGRES_PORT', '5432')
    }
    
    try:
        conn = psycopg2.connect(**postgres_config)
        cursor = conn.cursor()
        
        # SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        indexes_sql = [
            "CREATE INDEX IF NOT EXISTS idx_matches_date ON \"Matches\"(date);",
            "CREATE INDEX IF NOT EXISTS idx_matches_teams ON \"Matches\"(team_home, team_away);",
            "CREATE INDEX IF NOT EXISTS idx_alias_team_id_team ON alias_team(id_team);",
            "CREATE INDEX IF NOT EXISTS idx_alias_team_alias ON alias_team(alias_name);",
            "CREATE INDEX IF NOT EXISTS idx_odds_from_sources_match ON odds_from_sources(match_id);",
            "CREATE INDEX IF NOT EXISTS idx_bookmakers_odds_match ON \"Bookmakers_odds\"(match_id);",
            "CREATE INDEX IF NOT EXISTS idx_splits_date ON \"Splits\"(date);",
            "CREATE INDEX IF NOT EXISTS idx_split_matches_split ON split_matches(split_id);"
        ]
        
        for i, sql in enumerate(indexes_sql, 1):
            try:
                cursor.execute(sql)
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {i} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ {i}: {e}")
        
        conn.commit()
        cursor.close()
        conn.close()
        
        print("‚úÖ –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not create_database():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    if not create_tables():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    if not create_indexes():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã")
        return
    
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main() 